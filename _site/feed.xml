<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-16T15:29:23-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">CS 184 Projects</title><subtitle></subtitle><author><name>Sagnik Bhattacharya and Catherine Huang</name></author><entry><title type="html">Project 1</title><link href="http://localhost:4000/project-1" rel="alternate" type="text/html" title="Project 1" /><published>2022-02-14T00:00:00-08:00</published><updated>2022-02-14T00:00:00-08:00</updated><id>http://localhost:4000/project-1</id><content type="html" xml:base="http://localhost:4000/project-1"><![CDATA[<h2 id="part-1-rasterizing-single-color-triangles">Part 1: Rasterizing single-color triangles</h2>

<p>We first finding a bounding box by calculating the minimum and maximum
x and y coordinates. For each point, we determine whether it’s inside
or outside the triangle by testing the orientation using the dot
product between the normal vector to the line and the vector
containing the point and a vertex of the line. If we traverse the
points in a clockwise manner, all signs should be negative. In
contrast, if we traverse the points in a counterclockwise manner, all
signs should be positive. To handle cases where the point lies on the
edge of the triangle, we denote landing on a line as <code class="language-plaintext highlighter-rouge">MAYBE</code>. Then we
enumerate all possibilities combinations of <code class="language-plaintext highlighter-rouge">TRUE/FALSE/MAYBE</code>s that
imply landing on or inside the triangle (either 2 MAYBEs which means
it’s a corner, 1 <code class="language-plaintext highlighter-rouge">MAYBE</code> and two <code class="language-plaintext highlighter-rouge">FALSE</code>s, or 1 <code class="language-plaintext highlighter-rouge">MAYBE</code> and two
<code class="language-plaintext highlighter-rouge">TRUE</code>s). In the case the point is in the triangle, we update the
sample buffer with the color of the triangle.</p>

<p><img src="../proj1/task2_img/test4_16.png" alt="imag" /></p>
<h3 id="part-2-antialiasing-triangles">Part 2: Antialiasing triangles</h3>

<p>To properly antialias, we resized the sample buffer by <code class="language-plaintext highlighter-rouge">sqrt{sampling_rate}</code> in both height and width dimensions. To avoid any potential floating point issues, we opted to scale our triangle up and traverse through the triangle in whole increments. Then, to render the image at the original size, in <code class="language-plaintext highlighter-rouge">resolve_to_framebuffer</code>, we take <code class="language-plaintext highlighter-rouge">sampling rate</code> number of samples (corresponds to one pixel) and update the <code class="language-plaintext highlighter-rouge">rgb_framebuffer</code>.</p>
<h3 id="part-3-transforms">Part 3: Transforms</h3>

<h3 id="task-4-barycentric-coordinates">Task 4: Barycentric Coordinates</h3>

<p>Barycentric coordinates can be seen as a way to figure out the
distance from the three vertices of a triangle, providing a coordinate
system that is relative to the triangle. They allow us to
smoothly blend attributes at the vertices of a triangle. The attribute
of interest for us is color in this part, but it can also be used to
help translate between image and texture coordinates by blending the
texture coordinates at each of the vertices.</p>

<p>This is some tex that I would like to see rendered: \(\sqrt{3}\).
This is some other text.
Please tell me there’s no stupid extra square root somewhere here.</p>]]></content><author><name>Sagnik Bhattacharya and Catherine Huang</name></author><category term="journal" /><category term="project" /><summary type="html"><![CDATA[Part 1: Rasterizing single-color triangles We first finding a bounding box by calculating the minimum and maximum x and y coordinates. For each point, we determine whether it’s inside or outside the triangle by testing the orientation using the dot product between the normal vector to the line and the vector containing the point and a vertex of the line. If we traverse the points in a clockwise manner, all signs should be negative. In contrast, if we traverse the points in a counterclockwise manner, all signs should be positive. To handle cases where the point lies on the edge of the triangle, we denote landing on a line as MAYBE. Then we enumerate all possibilities combinations of TRUE/FALSE/MAYBEs that imply landing on or inside the triangle (either 2 MAYBEs which means it’s a corner, 1 MAYBE and two FALSEs, or 1 MAYBE and two TRUEs). In the case the point is in the triangle, we update the sample buffer with the color of the triangle. Part 2: Antialiasing triangles To properly antialias, we resized the sample buffer by sqrt{sampling_rate} in both height and width dimensions. To avoid any potential floating point issues, we opted to scale our triangle up and traverse through the triangle in whole increments. Then, to render the image at the original size, in resolve_to_framebuffer, we take sampling rate number of samples (corresponds to one pixel) and update the rgb_framebuffer. Part 3: Transforms Task 4: Barycentric Coordinates Barycentric coordinates can be seen as a way to figure out the distance from the three vertices of a triangle, providing a coordinate system that is relative to the triangle. They allow us to smoothly blend attributes at the vertices of a triangle. The attribute of interest for us is color in this part, but it can also be used to help translate between image and texture coordinates by blending the texture coordinates at each of the vertices. This is some tex that I would like to see rendered: \(\sqrt{3}\). This is some other text. Please tell me there’s no stupid extra square root somewhere here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/p1-lion.png" /><media:content medium="image" url="http://localhost:4000/p1-lion.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>